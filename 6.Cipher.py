def get_number1():
    import random
    n = random.choice(range(3, 21))  # Генерация первого числа.
    # Вывод цифрового замка с заполненным первым полем.
    print('__________________________________________________\n|    |                                           |')
    if n < 10:  # Если число из одной цифры, добавляется пробел перед числом.
        print('| ', n, '|                                           |')
    else:
        print('|', n, '|                                           |')
    print('|____|___________________________________________|')
    return n


def get_number2(n):
    # math.ceil округляет арифметически, а не до чётного, как round,
    # и не только в меньшую сторону, как int.
    import math
    result = ''
    # Перебор всех пар чисел.
    # Первое в паре число перебирается в отрезке от 1 до арифметически округлённой половины заданного числа n (number1),
    # т.к. потом пары будут повторяться в обратном порядке. (Использована подсказка в задаче.)
    for i in range(1, math.ceil(n / 2)):
        # Перебор второго в паре числа. Т.к. по условию заданное число не меньше 3,
        # и не рассматриваются повторяющиеся пары, то перебор начинается с числа 3 - 1 = 2.
        for j in range(2, n):
            if n % (i + j) == 0:  # Если заданное число безостатка делится на сумму пары чисел,
                result += str(i) + str(j)  # записывается найденная пара в результирующую строку (с преобразованием).
    return result


number1 = get_number1()  # Для ленивой фантазии.
number = int(input('Введите число, указанное в первом поле цифрового замка: '))
while number != number1:  # Для невнимательных.
    number = int(input('Проверьте число, указанное в первом поле цифрового замка, и введите его: '))
# Ели не использовать функцию get_number1, а получать первое число от пользователя, то используем блок
# while number < 3 or number > 20:
#    number = int(input('Введённое число некорректно, введите число из отрезка от 3 до 20: '))
print('Ваше второе число-ключ:', get_number2(number1))
